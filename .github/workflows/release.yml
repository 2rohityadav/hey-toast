name: Release

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Verify pnpm installation
        run: |
          pnpm --version
          node --version
          npm --version
          ls -la
          cat package.json | grep -A 5 -B 5 "scripts"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test -- --coverage

      - name: Check coverage files
        run: |
          echo "Checking for coverage files..."
          ls -la coverage/ || echo "No coverage directory found"
          find . -name "*.lcov" -o -name "coverage-*.json" -o -name "clover.xml" || echo "No coverage files found"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # Let Codecov auto-detect coverage files instead of specifying
          # This works better with different test frameworks
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Install semantic-release plugins globally
        run: |
          npm install -g @semantic-release/changelog @semantic-release/npm @semantic-release/github

      - name: Debug repository info
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Remote branches:"
          git branch -r
          echo "Repository URL:"
          git remote get-url origin
          echo "Package.json repository:"
          cat package.json | grep -A 3 "repository"

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
